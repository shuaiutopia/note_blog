{"meta":{"title":"Mr. & Mrs. sun","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/note_blog/"},"pages":[{"title":"about","date":"2020-04-17T02:05:01.000Z","updated":"2020-04-17T08:48:08.219Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"广电运通_智慧安检部_前端开发"},{"title":"tags","date":"2020-04-17T01:51:31.000Z","updated":"2020-04-17T01:51:55.972Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-04-17T02:00:34.000Z","updated":"2020-04-17T02:00:51.662Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tagscls","date":"2020-04-17T01:59:51.000Z","updated":"2020-04-17T01:59:51.205Z","comments":true,"path":"tagscls/index.html","permalink":"http://yoursite.com/tagscls/index.html","excerpt":"","text":""}],"posts":[{"title":"认识营销","slug":"mrs/商业的密码/认识营销","date":"2020-04-20T02:30:00.000Z","updated":"2020-04-20T02:33:04.067Z","comments":true,"path":"2020/04/20/mrs/商业的密码/认识营销/","link":"","permalink":"http://yoursite.com/2020/04/20/mrs/%E5%95%86%E4%B8%9A%E7%9A%84%E5%AF%86%E7%A0%81/%E8%AE%A4%E8%AF%86%E8%90%A5%E9%94%80/","excerpt":"商业秘密的系列课程,这是第一课程","text":"商业秘密的系列课程,这是第一课程 商业的秘密第一课xxxxxx","categories":[{"name":"mrs","slug":"mrs","permalink":"http://yoursite.com/categories/mrs/"},{"name":"商业的秘密","slug":"mrs/商业的秘密","permalink":"http://yoursite.com/categories/mrs/%E5%95%86%E4%B8%9A%E7%9A%84%E7%A7%98%E5%AF%86/"}],"tags":[{"name":"营销","slug":"营销","permalink":"http://yoursite.com/tags/%E8%90%A5%E9%94%80/"},{"name":"商业","slug":"商业","permalink":"http://yoursite.com/tags/%E5%95%86%E4%B8%9A/"}]},{"title":"vue-第一节","slug":"mr/vue/核心库/第一节","date":"2020-04-17T01:54:59.000Z","updated":"2020-04-20T02:29:08.117Z","comments":true,"path":"2020/04/17/mr/vue/核心库/第一节/","link":"","permalink":"http://yoursite.com/2020/04/17/mr/vue/%E6%A0%B8%E5%BF%83%E5%BA%93/%E7%AC%AC%E4%B8%80%E8%8A%82/","excerpt":"这是 vue 的第一节课程, 我们来看看它的配置文件 改造 vue_cli3+ 的 js 版本支持 ts","text":"这是 vue 的第一节课程, 我们来看看它的配置文件 改造 vue_cli3+ 的 js 版本支持 ts生成vue项目的vue_cli版本为 4.0.5 应用场景: 目前已经在开发的项目, 后续想要摸摸 ts 刚开始学习 ts, 不敢完全入坑 安装12345yarn add typescript ts-loader --dev &#x2F;&#x2F; 编译用yarn add vue-property-decorator &#x2F;&#x2F; 写vue组件时用yarn add fork-ts-checker-webpack-plugin --dev &#x2F;&#x2F; typescript 类型检查的webpack插件yarn add @types&#x2F;webpack-env &#x2F;&#x2F; 包含webpack的类型定义(在tsconfig.json中定义types用,目前没有测试出有什么影响)yarn add @typescript-eslint&#x2F;parser --dev &#x2F;&#x2F; eslint中的parse依赖r 书写 vue.config.js 修改 webpack 的 loadervue.config.js 必须是 js 文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768const path = require(\"path\");function resolve(dir) &#123; return path.join(__dirname, dir);&#125;const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin')module.exports = &#123; // lintOnSave: process.env.NODE_ENV === \"development\", lintOnSave: true, configureWebpack: &#123; resolve: &#123; extensions: ['.tsx','.ts', '.mjs', '.js', '.jsx', '.vue', '.json', '.wasm'] &#125; &#125;, chainWebpack: config =&gt; &#123; // 处理ts文件 (新增loader) config.module .rule('ts') .test(/\\.tsx?$/) .exclude .add(resolve('node_modules')) .end() .use('cache-loader') .loader('cache-loader') .options(&#123; cacheDirectory: resolve('node_modules/.cache/ts-loader') &#125;) .end() .use('babel-loader') .loader('babel-loader') .end() .use('ts-loader') .loader('ts-loader') .options(&#123; transpileOnly: true, // 关闭类型检查，即只进行转译(类型检查交给webpack插件(fork-ts-checker-webpack-plugin)在另一个进程中进行,这就是所谓的多进程方案,如果设置transpileOnly为false, 则编译和类型检查全部由ts-loader来做, 这就是单进程方案.显然多进程方案速度更快) appendTsSuffixTo: ['\\\\.vue$'], happyPackMode: false &#125;) .end() // eslint 自动修复 (修改已经存在的loader) config.module .rule('eslint') .test(/\\.(vue|(j|t)sx?)$/) .pre() // eslint是pre处理的 .use('eslint-loader') .loader('eslint-loader') .tap(options =&gt; &#123; // 修改已经存在loader的配置 options.fix = true return options &#125;) .end() // 使用webpack 插件进行typescript 的类型检查 fork-ts-checker-webpack-plugin config .plugin('fork-ts-checker') .use(ForkTsCheckerWebpackPlugin, [&#123; vue: true, tslint: false, formatter: 'codeframe', checkSyntacticErrors: false, // 因为fork-ts-checker-webpack-plugin是在单独的进程跑的，所以它的错误或警告信息是异步回传给到webpack进程的, 这时编译报错信息只在终端显示,不会在预览的浏览器界面显示报错信息。 // 将async设置为false后，就要求webpack等待fork-ts-checker-webpack-plugin进程返回信息, 这样会在页面显示编译报错信息。不过这样做也可能会拖慢整个webpack的转译等待时间。 // async: false &#125;]) &#125;&#125; 项目根目录下新建 tsconfig.json 文件配置编译 ts 文件规则.我们默认使用了vue-cli 生成项目时选择 typescript 版本时的 tsconfig.json 自定义新增了 &quot;noImplicitAny&quot;: false, strictPropertyInitialization 这个配置是要求定义类的属性时必须初始化赋值,在&quot;strict&quot;: true 时自动设置为 true,这非常不合理,因为我们在 vue 中属性的值经常在 created/mounted 赋值, 因此设置为 &quot;strictPropertyInitialization&quot;: false. strictNullChecks 这个配置是严格的 null 检查模式. 在&quot;strictNullChecks&quot;: true模式下(&quot;strict&quot;: true 时自动设置为 true), null 和 undefined 值不包含在任何类型里, 但是我们在 vue 的 data 里面初始化变量时,经常会初始化为 null, 因此我们将此配置设置为 false 12&#x2F;&#x2F; strictNullChecks:true时下面一行会报错let str: string &#x3D; null 上述连个配置均为 strict: true配置导致的, 如果你想简单可以将其注释掉, 因为 strict 默认为 false, 上述两个配置默认也是 false 12strict: true &#x2F;&#x2F;启用所有严格类型检查选项。&#x2F;&#x2F; 启用 --strict相当于启用 --noImplicitAny, --noImplicitThis, --alwaysStrict， --strictNullChecks和 --strictFunctionTypes和--strictPropertyInitialization。 最终 tsconfig.json 12345678910111213141516171819202122232425262728293031323334353637383940414243&#123; &quot;compilerOptions&quot;: &#123; &quot;target&quot;: &quot;esnext&quot;, &quot;module&quot;: &quot;esnext&quot;, &quot;strict&quot;: true, &quot;strictPropertyInitialization&quot;: false, &quot;strictNullChecks&quot;: false, &quot;jsx&quot;: &quot;preserve&quot;, &quot;noImplicitAny&quot;: false, &quot;importHelpers&quot;: true, &quot;moduleResolution&quot;: &quot;node&quot;, &quot;experimentalDecorators&quot;: true, &quot;esModuleInterop&quot;: true, &quot;allowSyntheticDefaultImports&quot;: true, &quot;sourceMap&quot;: true, &quot;baseUrl&quot;: &quot;.&quot;, &quot;types&quot;: [ &quot;webpack-env&quot;, &quot;jest&quot; ], &quot;paths&quot;: &#123; &quot;@&#x2F;*&quot;: [ &quot;src&#x2F;*&quot; ] &#125;, &quot;lib&quot;: [ &quot;esnext&quot;, &quot;dom&quot;, &quot;dom.iterable&quot;, &quot;scripthost&quot; ] &#125;, &quot;include&quot;: [ &quot;src&#x2F;**&#x2F;*.ts&quot;, &quot;src&#x2F;**&#x2F;*.tsx&quot;, &quot;src&#x2F;**&#x2F;*.vue&quot;, &quot;tests&#x2F;**&#x2F;*.ts&quot;, &quot;tests&#x2F;**&#x2F;*.tsx&quot; ], &quot;exclude&quot;: [ &quot;node_modules&quot; ]&#125; 其他版本的 tsconfig.json, 重点在 paths 和 types 1234567891011121314151617181920212223242526272829303132333435363738394041424344&#123; &quot;compilerOptions&quot;: &#123; &quot;target&quot;: &quot;esnext&quot;, &#x2F;&#x2F; 编译目标语法, 可以写es5, 但是我们项目的ts-loader前经过了babel-loader &quot;module&quot;: &quot;esnext&quot;, &#x2F;&#x2F; &quot;strict&quot;: true, &quot;strictPropertyInitialization&quot;: false, &#x2F;&#x2F; strict为true时,默认为true &quot;strictNullChecks&quot;: false, &#x2F;&#x2F; 设置null为其他类型的子类型, 效果:变量或者属性可以初始化为null &quot;jsx&quot;: &quot;preserve&quot;, &quot;noImplicitAny&quot;: false, &#x2F;&#x2F; false表示运行隐式的any类型,也就是允许不设置任何类型, 这个设置运行js文件直接改成ts文件 &quot;importHelpers&quot;: true, &quot;moduleResolution&quot;: &quot;node&quot;, &#x2F;&#x2F; 和nodejs一样的node_modules机制 &quot;experimentalDecorators&quot;: true, &quot;esModuleInterop&quot;: true, &quot;allowSyntheticDefaultImports&quot;: true, &quot;sourceMap&quot;: true, &quot;baseUrl&quot;: &quot;.&quot;, &quot;paths&quot;: &#123; &#x2F;&#x2F; 配合baseUrl, ts文件中import 模块路径的解析规则 &quot;@&#x2F;*&quot;: [ &quot;src&#x2F;*&quot;, &quot;src&#x2F;types&#x2F;*&quot; ], &quot;*&quot;:[ &quot;node_modules&#x2F;*&quot;, &quot;src&#x2F;types&#x2F;*&quot; ] &#125;, &quot;lib&quot;: [ &quot;esnext&quot;, &quot;dom&quot;, &quot;dom.iterable&quot;, &quot;scripthost&quot; ] &#125;, &quot;include&quot;: [ &quot;src&#x2F;**&#x2F;*.ts&quot;, &quot;src&#x2F;**&#x2F;*.tsx&quot;, &quot;src&#x2F;**&#x2F;*.vue&quot;, &quot;tests&#x2F;**&#x2F;*.ts&quot;, &quot;tests&#x2F;**&#x2F;*.tsx&quot; ], &quot;exclude&quot;: [ &quot;node_modules&quot; ]&#125; 以上两个版本主要是 paths 和 types 不同, 你需要了解他们的作用,并在工作中设置合适的值.第二种的其他版本运行把所有的 .d.ts 文件放到 src/types 文件夹内. 在 src 文件下新建一个 ts 文件在 src 下新建 shims-vue.d.ts 文件, 否则会报错如下: 12ERROR TS18003: No inputs were found in config file &#39;tsconfig.json&#39;. Specified &#39;include&#39; paths were &#39;[&quot;src&#x2F;**&#x2F;*.ts&quot;,&quot;src&#x2F;**&#x2F;*.tsx&quot;,&quot;src&#x2F;**&#x2F;*.vue&quot;,&quot;tests&#x2F;**&#x2F;*.ts&quot;,&quot;tests&#x2F;**&#x2F;*.tsx&quot;]&#39; and &#39;exclude&#39; paths were &#39;[&quot;node_modules&quot;]&#39;. vueCli3 的 typescript 版本有 shims-vue.d.ts和 shims-tsx.d.ts 这两个文件,我们不妨把他们放到 src 下. 12345// shim-vue.d.tsdeclare module '*.vue' &#123; import Vue from 'vue' export default Vue&#125; 1234567891011121314// shims-tsx.d.tsimport Vue, &#123; VNode &#125; from 'vue'declare global &#123; namespace JSX &#123; // tslint:disable no-empty-interface interface Element extends VNode &#123;&#125; // tslint:disable no-empty-interface interface ElementClass extends Vue &#123;&#125; interface IntrinsicElements &#123; [elem: string]: any &#125; &#125;&#125; 以上文件的原理,详见 typescript的 module-augmentation(模块补充: 可以通过路径在文件中增补类型定义) typescript关于模块补充的手册 vue增强类型以配合插件使用 增加 eslint 规则解决使用 ts 内置类型时保报错 ,例如 Partial.安装(第一步已经安装) 1yarn add @typescript-eslint&#x2F;parser --dev 配置 .eslintrc.js 文件的 parser 项为 @typescript-eslint/parser 在 vue-cli(js版) 生成的 .eslintrc.js 中简单修改 1234567891011121314151617181920212223242526272829303132333435module.exports = &#123; root: true, env: &#123; node: true, browser: true, es6: true &#125;, 'extends': [ 'plugin:vue/essential', 'eslint:recommended', '@vue/prettier' ], parserOptions: &#123; // parser: 'babel-eslint', parser: '@typescript-eslint/parser', // 解析ts文件, 例如识别ts文件的内置类型 ecmaFeatures: &#123; legacyDecorators: true &#125; &#125;, rules: &#123; 'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off', 'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off' &#125;, overrides: [ &#123; files: [ '**/__tests__/*.&#123;j,t&#125;s?(x)', '**/tests/unit/**/*.spec.&#123;j,t&#125;s?(x)' ], env: &#123; jest: true &#125; &#125; ]&#125; 在上述 .eslintrc.js 的配置中, 默认是使用双引号和分号结尾的, 当我在 rules中修改时,会和 prettier 的配置冲突, 因此在根目录下新建 .prettierrc.js 文件,书写 1234567891011module.exports = &#123; \"printWidth\": 80, // 每行代码长度（默认80） \"tabWidth\": 2, // 每个tab相当于多少个空格（默认2） \"useTabs\": false, // 是否使用tab进行缩进（默认false） \"singleQuote\": true, // 使用单引号（默认false） \"semi\": false, // 声明结尾使用分号(默认true) \"trailingComma\": \"all\", // 多行使用拖尾逗号（默认none） \"bracketSpacing\": true, // 对象字面量的大括号间使用空格（默认true） \"jsxBracketSameLine\": false, // 多行JSX中的&gt;放置在最后一行的结尾，而不是另起一行（默认false） \"arrowParens\": \"avoid\" // 只有一个参数的箭头函数的参数是否带圆括号（默认avoid）&#125;; 其他版本module.exports = &#123; root: true, parserOptions: &#123; // +++++++++++ parser: '@typescript-eslint/parser', sourceType: 'module', ecmaFeatures: &#123; legacyDecorators: true &#125; &#125;, env: &#123; browser: true, node: true, es6: true, &#125;, // plugin：包名/配置名称 extends: ['plugin:vue/recommended', 'eslint:recommended'], // add your custom rules here //it is base on https://github.com/vuejs/eslint-config-vue rules: &#123; \"vue/max-attributes-per-line\": [2, &#123; \"singleline\": 10, \"multiline\": &#123; \"max\": 1, \"allowFirstLine\": false &#125; &#125;], \"vue/singleline-html-element-content-newline\": \"off\", \"vue/multiline-html-element-content-newline\":\"off\", \"vue/name-property-casing\": [\"error\", \"PascalCase\"], \"vue/no-v-html\": \"off\", 'accessor-pairs': 2, 'arrow-spacing': [2, &#123; 'before': true, 'after': true &#125;], 'block-spacing': [2, 'always'], 'brace-style': [2, '1tbs', &#123; 'allowSingleLine': true &#125;], 'camelcase': [0, &#123; 'properties': 'always' &#125;], 'comma-dangle': [2, 'never'], 'comma-spacing': [2, &#123; 'before': false, 'after': true &#125;], 'comma-style': [2, 'last'], 'constructor-super': 2, 'curly': [2, 'multi-line'], 'dot-location': [2, 'property'], 'eol-last': 2, 'eqeqeq': [\"error\", \"always\", &#123;\"null\": \"ignore\"&#125;], 'generator-star-spacing': [2, &#123; 'before': true, 'after': true &#125;], 'handle-callback-err': [2, '^(err|error)$'], 'indent': [2, 2, &#123; 'SwitchCase': 1 &#125;], 'jsx-quotes': [2, 'prefer-single'], 'key-spacing': [2, &#123; 'beforeColon': false, 'afterColon': true &#125;], 'keyword-spacing': [2, &#123; 'before': true, 'after': true &#125;], 'new-cap': [2, &#123; 'newIsCap': true, 'capIsNew': false &#125;], 'new-parens': 2, 'no-array-constructor': 2, 'no-caller': 2, 'no-console': 'off', 'no-class-assign': 2, 'no-cond-assign': 2, 'no-const-assign': 2, 'no-control-regex': 0, 'no-delete-var': 2, 'no-dupe-args': 2, 'no-dupe-class-members': 2, 'no-dupe-keys': 2, 'no-duplicate-case': 2, 'no-empty-character-class': 2, 'no-empty-pattern': 2, 'no-eval': 2, 'no-ex-assign': 2, 'no-extend-native': 2, 'no-extra-bind': 2, 'no-extra-boolean-cast': 2, 'no-extra-parens': [2, 'functions'], 'no-fallthrough': 2, 'no-floating-decimal': 2, 'no-func-assign': 2, 'no-implied-eval': 2, 'no-inner-declarations': [2, 'functions'], 'no-invalid-regexp': 2, 'no-irregular-whitespace': 2, 'no-iterator': 2, 'no-label-var': 2, 'no-labels': [2, &#123; 'allowLoop': false, 'allowSwitch': false &#125;], 'no-lone-blocks': 2, 'no-mixed-spaces-and-tabs': 2, 'no-multi-spaces': 2, 'no-multi-str': 2, 'no-multiple-empty-lines': [2, &#123; 'max': 1 &#125;], 'no-native-reassign': 2, 'no-negated-in-lhs': 2, 'no-new-object': 2, 'no-new-require': 2, 'no-new-symbol': 2, 'no-new-wrappers': 2, 'no-obj-calls': 2, 'no-octal': 2, 'no-octal-escape': 2, 'no-path-concat': 2, 'no-proto': 2, 'no-redeclare': 2, 'no-regex-spaces': 2, 'no-return-assign': [2, 'except-parens'], 'no-self-assign': 2, 'no-self-compare': 2, 'no-sequences': 2, 'no-shadow-restricted-names': 2, 'no-spaced-func': 2, 'no-sparse-arrays': 2, 'no-this-before-super': 2, 'no-throw-literal': 2, 'no-trailing-spaces': 2, 'no-undef': 2, 'no-undef-init': 2, 'no-unexpected-multiline': 2, 'no-unmodified-loop-condition': 2, 'no-unneeded-ternary': [2, &#123; 'defaultAssignment': false &#125;], 'no-unreachable': 2, 'no-unsafe-finally': 2, 'no-unused-vars': [2, &#123; 'vars': 'all', 'args': 'none' &#125;], 'no-useless-call': 2, 'no-useless-computed-key': 2, 'no-useless-constructor': 2, 'no-useless-escape': 0, 'no-whitespace-before-property': 2, 'no-with': 2, 'one-var': [2, &#123; 'initialized': 'never' &#125;], 'operator-linebreak': [2, 'after', &#123; 'overrides': &#123; '?': 'before', ':': 'before' &#125; &#125;], 'padded-blocks': [2, 'never'], 'quotes': [2, 'single', &#123; 'avoidEscape': true, 'allowTemplateLiterals': true &#125;], 'semi': [2, 'never'], 'semi-spacing': [2, &#123; 'before': false, 'after': true &#125;], 'space-before-blocks': [2, 'always'], 'space-before-function-paren': [2, 'never'], 'space-in-parens': [2, 'never'], 'space-infix-ops': 2, 'space-unary-ops': [2, &#123; 'words': true, 'nonwords': false &#125;], 'spaced-comment': [2, 'always', &#123; 'markers': ['global', 'globals', 'eslint', 'eslint-disable', '*package', '!', ','] &#125;], 'template-curly-spacing': [2, 'never'], 'use-isnan': 2, 'valid-typeof': 2, 'wrap-iife': [2, 'any'], 'yield-star-spacing': [2, 'both'], 'yoda': [2, 'never'], 'prefer-const': 2, 'no-debugger': process.env.NODE_ENV === 'production' ? 2 : 0, 'object-curly-spacing': [2, 'always', &#123; objectsInObjects: false &#125;], 'array-bracket-spacing': [2, 'never'] &#125;&#125; 一个注意如果你写了如下代码, 会报一个错误: 123456789101112131415&lt;template&gt;&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123; Vue, Component &#125; from &quot;vue-property-decorator&quot;@Componentexport default class TestTs extends Vue &#123; message: string &#x3D; &quot;hello ts!&quot;; mounted() &#123; setTimeout(()&#x3D;&gt;&#123; this.message &#x3D; &quot;hello typeScript!&quot; &#125;,2000) &#125;&#125;&lt;&#x2F;script&gt; 错误如下: 1error Parsing error: Using the export keyword between a decorator and a class is not allowed. Please use &#96;export @dec class&#96; instead. 解决方法: 修改eslintrc.js 12345parserOptions: &#123; ecmaFeatures: &#123; legacyDecorators: true &#125; &#125;, vue-property-decorator 的使用vue-property-decorator","categories":[{"name":"mr","slug":"mr","permalink":"http://yoursite.com/categories/mr/"},{"name":"vue","slug":"mr/vue","permalink":"http://yoursite.com/categories/mr/vue/"},{"name":"核心库","slug":"mr/vue/核心库","permalink":"http://yoursite.com/categories/mr/vue/%E6%A0%B8%E5%BF%83%E5%BA%93/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"},{"name":"核心库","slug":"核心库","permalink":"http://yoursite.com/tags/%E6%A0%B8%E5%BF%83%E5%BA%93/"},{"name":"配置文件","slug":"配置文件","permalink":"http://yoursite.com/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"}]}],"categories":[{"name":"mrs","slug":"mrs","permalink":"http://yoursite.com/categories/mrs/"},{"name":"商业的秘密","slug":"mrs/商业的秘密","permalink":"http://yoursite.com/categories/mrs/%E5%95%86%E4%B8%9A%E7%9A%84%E7%A7%98%E5%AF%86/"},{"name":"mr","slug":"mr","permalink":"http://yoursite.com/categories/mr/"},{"name":"vue","slug":"mr/vue","permalink":"http://yoursite.com/categories/mr/vue/"},{"name":"核心库","slug":"mr/vue/核心库","permalink":"http://yoursite.com/categories/mr/vue/%E6%A0%B8%E5%BF%83%E5%BA%93/"}],"tags":[{"name":"营销","slug":"营销","permalink":"http://yoursite.com/tags/%E8%90%A5%E9%94%80/"},{"name":"商业","slug":"商业","permalink":"http://yoursite.com/tags/%E5%95%86%E4%B8%9A/"},{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"},{"name":"核心库","slug":"核心库","permalink":"http://yoursite.com/tags/%E6%A0%B8%E5%BF%83%E5%BA%93/"},{"name":"配置文件","slug":"配置文件","permalink":"http://yoursite.com/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"}]}